package ${packageName}.domain;

#if($openMybatisPlus)
import com.baomidou.mybatisplus.annotation.TableName;
import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.FieldFill;
import com.baomidou.mybatisplus.annotation.TableField;
#end
#foreach ($import in $importList)
import ${import};
#end
#if($openLombok)
import lombok.Data;
#if($openBaseEntity)
import lombok.EqualsAndHashCode;
#end
#end

#if($openBaseEntity)
import ${baseEntityWay}.${baseEntityName};
#else
import java.io.Serializable;
#end

/**
 * ${functionName}对象 ${tableName}
 * 
 * @author ${author}
 * @date ${datetime}
 */

#if($openLombok)
@Data
#if($openBaseEntity)
@EqualsAndHashCode(callSuper = true)
#end
#end
#if($openMybatisPlus)
@TableName("${tableName}")
#end
public class ${ClassName} #if($openBaseEntity) extends ${baseEntityName} #else implements Serializable  #end
{
    private static final long serialVersionUID = 1L;

#foreach ($column in $columns)
#if(!$table.isSuperColumn($column.javaField))
    /** $column.columnComment */
#if($column.list)
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
#if($parentheseIndex != -1)
#elseif($column.javaType == 'Date')
    @JsonFormat(pattern = "yyyy-MM-dd")
#else
#end
#end
    #if($openMybatisPlus)
    #if($column.isPk == '1')
    @TableId(value = "$column.columnName", type = IdType.ASSIGN_UUID)
    #else
    @TableField(value = "$column.columnName")
    #end
    #end
    private $column.javaType $column.javaField;

#end
#end

#if($table.sub)
    /** $table.subTable.functionName信息 */
    private List<${subClassName}> ${subclassName}List;

#end

## 开启lombok 不自动生成setget方法
#if(!$openLombok)
#foreach ($column in $columns)
#if(!$table.isSuperColumn($column.javaField))
#if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
#set($AttrName=$column.javaField)
#else
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#end
    public void set${AttrName}($column.javaType $column.javaField) 
    {
        this.$column.javaField = $column.javaField;
    }

    public $column.javaType get${AttrName}() 
    {
        return $column.javaField;
    }
#end
#end

#if($table.sub)
    public List<${subClassName}> get${subClassName}List()
    {
        return ${subclassName}List;
    }

    public void set${subClassName}List(List<${subClassName}> ${subclassName}List)
    {
        this.${subclassName}List = ${subclassName}List;
    }
#end
#end
##    @Override
##    public String toString() {
##        return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE)
###foreach ($column in $columns)
###if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
###set($AttrName=$column.javaField)
###else
###set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
###end
##            .append("${column.javaField}", get${AttrName}())
###end
###if($table.sub)
##            .append("${subclassName}List", get${subClassName}List())
###end
##            .toString();
##    }
}
